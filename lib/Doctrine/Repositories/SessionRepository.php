<?php

/*
 * This file is part of Phraseanet
 *
 * (c) 2005-2013 Alchemy
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Repositories;

use Alchemy\Phrasea\Application;
use Doctrine\ORM\EntityRepository;
use Entities\Feed;

/**
 * SessionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SessionRepository extends EntityRepository
{
    /**
     * Returns all the feeds a user can access.
     *
     * @param  User_Adapter                            $user
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAllForUser(\User_Adapter $user)
    {
        $base_ids = array_keys($user->ACL()->get_granted_base());

        $dql = 'SELECT f FROM Entities\Feed f
            WHERE f.base_id IS NULL ';

        if (count($base_ids) > 0) {
            $dql .= ' OR f.base_id
                IN (' . implode(', ', $base_ids) . ') ';
        }

        $dql .= ' OR f.public = true
            ORDER BY f.updated_on DESC';

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }

    /**
     * Returns the given feed if the user can access to it.
     *
     * @param  Application   $app
     * @param  \User_Adapter $user
     * @param  type          $id
     * @return Feed
     */
    public function loadWithUser(Application $app, \User_Adapter $user, $id)
    {
        $feed = $this->find($id);
        if ($feed) {
            $coll = $feed->getCollection($app);
            if ($feed->isPublic()
                || $coll === null
                || in_array($coll->get_base_id(), array_keys($user->ACL()->get_granted_base()))) {
                return $feed;
            }
        }

        return null;
    }

    /**
     * Returns all the feeds from a given array containing their id.
     *
     * @param  array      $feed_id
     * @return Collection
     */
    public function findByIdArray(array $feed_id)
    {
        $dql = 'SELECT f FROM Entities\Feed f
            ORDER BY f.created_on DESC
            WHERE f.id IN (' . implode(",", $feed_id) . ')';

        $query = $this->_em->createQuery($dql);

        return $query->getResult();
    }
}
