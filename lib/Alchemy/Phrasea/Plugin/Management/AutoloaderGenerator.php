<?php

/*
 * This file is part of Phraseanet
 *
 * (c) 2005-2013 Alchemy
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Alchemy\Phrasea\Plugin\Management;

use Alchemy\Phrasea\Plugin\Exception\RegistrationFailureException;

class AutoloaderGenerator
{
    private $pluginDirectory;

    public function __construct($pluginDirectory)
    {
        $this->pluginDirectory = $pluginDirectory;
    }

    public function write($manifests)
    {
        $this
            ->doWrite('autoload.php', $this->createLoader($manifests))
            ->doWrite('services.php', $this->createServices($manifests));

        return $this;
    }

    private function doWrite($file, $data)
    {
        if (false === file_put_contents($this->pluginDirectory . DIRECTORY_SEPARATOR . $file, $data)) {
            throw new RegistrationFailureException(sprintf('Failed to write %s', $file));
        }

        return $this;
    }

    private function createLoader($manifests)
    {
        $buffer = "<?php\n"
            ."\n// This file is automatically generated, please do not edit it.\n"
            ."// To update configuration, use bin/console plugins:* commands.\n"
            ."\nreturn call_user_func(function () {\n";

        foreach ($manifests as $manifest) {
            $buffer .= "    require __DIR__ . '/" . $manifest->getName() . DIRECTORY_SEPARATOR . "vendor" . DIRECTORY_SEPARATOR . "autoload.php';\n";
        }

        // composer loader are preprent
        $buffer .= "    \$loader = require __DIR__ . '/../vendor/autoload.php';\n";

        $buffer .= "\n    return \$loader;\n});\n";

        return $buffer;
    }

    private function createServices($manifests)
    {
        $buffer = "<?php\n"
            ."\n// This file is automatically generated, please do not edit it.\n"
            ."// To update configuration, use bin/console plugins:* commands.\n"
            ."\nuse Alchemy\Phrasea\Application;\n"
            ."\nreturn call_user_func(function (Application \$app) {"
            ."\n";

        foreach ($manifests as $manifest) {
            foreach ($manifest->getServices() as $service) {
                $buffer .= "    \$app->register(\\".$service['class']."::create(\$app));\n";
            }
        }

        $buffer .= "\n    return \$app;\n}, \$app);\n";

        return $buffer;
    }
}
